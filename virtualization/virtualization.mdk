Title         : Virtualization
Author        : You
Logo          : True

[TITLE]

# Pengertian 
Virtualisasi adalah teknologi untuk membuat sistem operasi dapat berjalan
pada lingkungan virtual. Virtualisasi memungkinkan berjalannya beberapa
sistem operasi pada satu komputer fisik yang sama pada waktu yang bersamaan.
Sistem operasi yang berjalan pada virtualisasi terisolasi dari
lingkungan sistem operasi komputer fisiknya, sehingga jika terjadi gangguan 
pada sistem operasi virtual tidak akan menggangu komputer fisik/host nya.
Beberapa contoh teknologi virtualisasi antara lain virtualbox, vmware, vagrant
, dan docker.

# Virtual Machine dan Container
Teknologi virtualisasi saat ini terbagi menjadi dua jenis yaitu virtual mesin
dan kontainer. Virtual mesin adalah virtualisasi yang memvirtualkan sistem operasi
secara keseluruhan, sedangkan kontainer adalah teknologi yang memvirtualisasikan
aplikasi atau layanan. Contoh virtual mesin antara lain vmware dan virtualbox.
Sedangkan contoh dari kontainer adalah LXC dan docker.
Perbedaan antara virtual mesin dan kontainer dijelaskan oleh gambar berikut.

~ Center
![vm_vs_container]
~

Terlihat perbedaan antara virtual mesin(kiri) dan kontainer(kanan). 
Virtual mesin memvirtualkan keseluruhan sistem operasi, sedangkan kontainer
hanya memvirtualkan aplikasi dan pustaka/library yang diperlukan.

# Provisioning
_Provisioning_ adalah proses penyediaan aplikasi atau layanan pada komptuasi awan.
_Provisioning_ seringkali dilakukan menggunakan virtualisasi. Proses _provisioning_
terdiri dari pembuatan instance virtualisasi, konfigurasi sumber daya, 
instalasi sistem operasi, instalasi aplikasi atau layanan, dan konfigurasi apliaksi
atau layanan yang digunakan. Proses _provisioning_ sering kali menggunakan virtualisasi karena
dalam komputasi awan tidak boleh ada _down time_/layanan mati dalam waktu yang
cukup lama. Dengan virtualisasi, proses _provisioning_ menjadi lebih cepat dan
mengurangi down time hingga layanan _cloud_ terkesan memiliki _zero down time_.

# Vagrant
Vagrant adalah kerangka kerja untuk mengelola virtualisasi. Vagrant
menciptakan lingkungan virtual yang terisolasi. Vagrant sering digunakan oleh
developer yang bekerja dalam sebuah tim. Vagrant memastikan lingkungan pengembangan
antar developer sama dan konsisten, sehingga menghilangkan istilah "Ini bekerja pada sistem saya".
Vagrant juga digunakan pada proses _provisioning_/penyediaan layanan. 
Vagrant mendukung banyak provider virtualisasi seperti virtualbox, vmware, aws, dan docker.

## Getting Started
### Instalasi Vagrant
Untuk melakukan Instalasi vagrant terlebih dahulu siapkan komputer dengan sistem
operasi ubuntu 16.04. Instalasi vagrant dapat dilakukan dengan step-step berikut:

1. Install vagrant.
``` javascript
apt-get install vagrant
```
2. Install virtualbox.
   
``` javascript
apt-get install virtualbox
```
3. Jika telah selesai, coba periksa versi vagrant yang telah terinstall
  
``` javascript
vagrant --version
```

### Membuat Virtualisasi
Setelah berhasil menginstall vagrant, selanjutnya kita akan mencoba membuat
virtualisasi baru menggunakan provider virtualbox. Langkah-langkah pembuatan virtualisasi baru
dijelaskan sebagai berikut:

1. Buat folder baru untuk meletakkan konfigurasi.
  
``` javascript
mkdir vagrant-example
```
2. Masuk ke dalam folder yang telah di buat.
``` javascript
cd vagrant-example
```
3. Inisialisasi projek vagrant
``` javascript
vagrant init
```
  Setelah menjalankan perintah diatas akan dibuat file baru bernama `Vagrantfile`

4. Tambahkan box baru.
``` javascript
vagrant box add hashicorp/precise64
```
  Kemudian jika box mendukung lebih dari satu provider
  akan ditanyakan provider yang akan digunakan. Pilih provider virtualbox.
  
5. Edit file `Vagrantfile` kemudian ganti vm.box menjadi hashicorp/precise64
``` javascript
config.vm.box = "base"
#menjadi
config.vm.box = "hashicorp/precise64"
```
  Kemudian simpan file `Vagrantfile` yang telah diedit sebelumnya.

6. Jalankan virtualisasi
``` javascript
vagrant up
```

7. Setelah proses pembuatan virtualisasi selesai, login ke dalam virtualisasi menggunakan perintah `ssh`
``` javascript
vagrant ssh
```
8. Untuk mematikan virtualisasi gunakan fungsi `halt`
``` javascript
vagrant halt
```
9. Untuk melihat status virtualisasi gunakan fungsi `status`
``` javascript
vagrant status
```
10. Untuk menghapus virtualisasi gunakan fungsi `destroy`
``` javascript
vagrant destroy
```
  Menghapus virtualisasi akan menghapus semua data atau aplikasi di dalam virtualisasi
  

### Sinkronisasi folder
Adakalanya kita ingin mendevelop aplikasi menggunakan editor favorit kita
seperti `sublimetext`, `netbeans` dan lain sebagainya, tetapi kita ingin
agar kode-kode aplikasi kita tersebut berada di dalam virtualisasi sehingga
ketika terjadi perubahan kode maka kode tersebut langsung dipindahkan ke
dalam virtualisasi atau kita ingin folder di dalam virtualisasi dapat diakses
melalui komputer host untuk keperluan backup/audit. Hal seperti ini dapat dilakukan menggunakan fitur sinkronisasi
pada vagrant. Folder yang di sinkronisasi dapat diakses melalui komputer host 
atau virtual dengan kondisi tersinkronisasi, sehingga ketika terjadi perubahan
melalui komputer host atau melalui virtualisasi data-data dalam folder tersebut
tetap sama. Untuk mengaktifkan sinkronisasi folder lakukan langkah-langkah 
berikut:

1. Buka file `Vagrantfile` ubah baris berikut.
``` javascript
# config.vm.synced_folder "../data", "/vagrant_data"
menjadi
# config.vm.synced_folder "src/", "/var/www"
```
Simpan file `Vagrantfile`. `src/` adalah folder pada komputer host, sedangkan 
`/var/www` adalah folder pada komputer virtualisasi.

2. Buat folder src di dalam folder projek `vagrant example`
``` javascript
mkdir src
```
3. Buat file `index.html` pada folder src, isikan baris berikut
``` javascript
<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>
  <h1>hello world</h1>
</body>
</html>
```
4. Jalankan virtualisasi.
``` javascript
vagrant up
```
5. Masuk ke dalam virtualisasi.
``` javascript
vagrant ssh
```
6. Lakukan perubahan pada file `src/index.html` di komputer host, kemudian
cek file `index.html` yang berada pada folder `/var/www` di komputer virtual.
Kedua file akan berisi data yang sama, karena telah tersinkronisasi.

### Provisioning aplikasi pada komputer virtual
Kita menginginkan komputer virtual yang kita gunakan telah terinstall aplikasi
aplikasi yang kita butuhkan. Tahapan instalasi dan konfigurasi tersebut sering dikenal dengan sebutan
_provisioning_. Pada vagrant, _provisioning_ dapat dilakukan dengan mudah. Kita dapat
membuat script menggunakan bash scripting untuk melakukan _provisioning_. 
Langkah-langkah untuk melakukan _provisioning_ adalah sebagai berikut:

1. Buat bash script dengan nama `bootsrap.sh` pada folder yang sama dengan vagrant file.
2. Untuk menginstall apache tuliskan baris berikut pada file `bootsrap.sh`.
``` javascript
#!/usr/bin/env bash
apt-get update
apt-get install -y apache2
```
3. Pada file `Vagrantfile` dibawah baris `config.vm.box = "hashicorp/precise64"` tambahkan baris 
`config.vm.provision :shell, path: "bootstrap.sh"`.
``` javascript
Vagrant.configure("2") do |config|
  config.vm.box = "hashicorp/precise64"
  config.vm.provision :shell, path: "bootstrap.sh"
end
```
4. Simpan file Vagrantfile kemudian nyalakan virtualisasi.
``` javascript
vagrant up
```
Jika virtualisasi sudah dibuat dan sedang menyala maka jalankan 
fungsi `reload` dengan menambahkan flag `--provision` untuk memaksa 
vagrant merestart virtualisasi dan menjalankan script provisioning 
ketika mesin virtual sedang aktif.
``` javascript
vagrant reload --provison
```




[vm_vs_container]: images/vm_vs_container.png "vm_vs_container" { width:auto; max-width:90% }
